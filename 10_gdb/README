这是一个关于练习使用 gdb（GNU Debugger）的作业说明。以下是翻译内容：


---

任务说明

在本次作业中，您将练习 gdb 的基础使用。gdb 是一个在调试过程中收集信息的非常有用的工具，您在本学期后续内容中将频繁使用它。目前我们仅从一些基本命令开始。请确保您已完成关于 gdb 的阅读和视频学习。

您会收到 game.c 和已编译的 game 二进制文件，这是一个非常无聊的猜数字游戏。在第一轮中，程序会想一个秘密数字（每次都是相同的），并要求您猜测。您只有一次机会。
请注意，它通过调用 getSecretNumber 函数来确定该数字，而该函数的源码没有提供。

如果您猜对了，程序进入第二轮，程序会再想一个数字。它通过多次调用 getOtherSN（同样未提供源码）并传入不同数字来确定此数字。然后，它会将这些结果结合起来，进行一些数学计算，将结果组合成一个变量 total。然后程序会要求您再次猜测，并且您仍然只有一次机会。

在继续之前，先通过运行以下命令来“玩”一次游戏：

./game

例如，我运行它并猜测 4：

$ ./game 
I'm thinking of a number...
What number do you guess?
4
I'm sorry, that is not right.  You lose

要一次次玩这个游戏直到猜对并获胜会很无聊，但幸运的是，这不是重点。重点是练习使用 gdb。

在 emacs 中执行以下命令：

ESC-x gdb

Emacs 会提示您如何运行 gdb（默认选项即可），然后您会进入 gdb 的命令行界面。
使用 start 命令开始执行程序，然后使用 next 和 print 命令找到第一轮的秘密数字。当程序提示您输入这个数字时，您可以根据收集的信息猜对这个数字。

对于第二轮，您不需要逐步执行 5000+ 次循环，因此可以在循环结束后设置一个断点，继续执行直到到达断点，然后打印变量 total。现在您应该可以立即赢得第二轮！

找到这两个秘密数字后，创建一个名为 input.txt 的文件，将它们分别写在文件中的每一行（第一轮的秘密数字在第一行，第二轮的数字在第二行）。

您可以运行以下命令：

./game < input.txt

这将使您自动获胜。您应该看到以下输出（无需输入任何其他内容）：

$ ./game < input.txt 
I'm thinking of a number...
What number do you guess?
Correct! You win round1!
Ok, time for round 2. I have another secret number.
Your guess:
You win round 2 also!

完成后，将 input.txt 添加到 git 中，然后提交、推送并评分。


---

如果您在使用 gdb 或执行其他步骤时需要帮助，请随时询问！


任务说明
创建 retirement.c 文件
在文件顶部包含标准头文件 stdlib.h 和 stdio.h。

定义退休信息结构体
因为储蓄（工作期间）和支出（退休期间）都需要相同的基本信息，所以创建一个结构体来表示这些信息。
声明结构体 _retire_info，包含以下三个字段：

一个 int 类型的字段，名为 months，表示适用的月份数。
一个 double 类型的字段，名为 contribution，表示每月的存款（若为负数则为支出）。
一个 double 类型的字段，名为 rate_of_return，表示回报率（假设为“扣除通货膨胀后的”）。
声明结构体后，使用 typedef 使 retire_info 成为该结构体的类型名。

编写 retirement 函数
定义以下函数：

c
复制代码
void retirement (int startAge,   //以月为单位的起始年龄
                 double initial, //以美元为单位的初始储蓄
                 retire_info working, //关于工作期间的信息
                 retire_info retired) //关于退休期间的信息
该函数执行两个任务（类似的任务，可以考虑将其中相似的部分抽象成一个函数）：

工作期间的储蓄计算
每月计算你的退休账户余额，具体计算如下：

计算当前余额的收益增长（balance * rate of return），并将其加到当前余额上。
每月将存款金额加到余额上。
例如，若账户有 $1000，月回报率为 0.5%，每月存款 $100，那么计算如下：
$1000 * 0.005 = $5（获得的利息）
将利息和每月存款相加，余额变为 $1105。
每个月的开始时（余额变动之前），打印当前余额，格式如下：

plaintext
复制代码
Age %3d month %2d you have $%.2lf\n
前两个格式转换为储蓄者的年龄（年和月）
第三个格式转换为账户余额
此计算持续“working”结构体中指定的月数。
退休期间的支出计算
每月进行类似的计算，区别在于这里使用“retired”结构体中的信息。
同样需要打印和工作期间相同的信息。

提示：既然这两个计算非常相似，可以考虑将相同的部分抽象成一个函数，以避免重复编写代码。

编写 main 函数
计算假设的退休计划，参数如下：

工作期间

月数：489
每月存款：$1000
回报率：每年 4.5%（每月 0.045/12）
退休期间

月数：384
每月支出：-4000
回报率：每年 1%（每月 0.01/12）
起始条件

年龄：327 个月（27 岁零 3 个月）
储蓄：$21,345
编译并测试代码
使用提供的 Makefile 编译代码，并使用提供的 retirement_ans.txt 进行对比测试。

提交代码
提交完成的 retirement.c 文件。

